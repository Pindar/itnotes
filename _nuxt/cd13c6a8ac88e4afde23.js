(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{229:function(e,n){e.exports={body:'<p><em>oder die Kunst ein neues System nicht zu einem Legacy-Projekt verkommen zu lassen.</em></p>\n\n<p>Die allermeisten Programmierer mögen Projekte lieber, die nicht auf einer bestehenden Code-Basis aufbauen. Sie lieben es selbst auf der grünen Wiese anzufangen und sind sich sicher, dass sie diesmal alles richtig machen werden. Diesmal wird am Ende ein wunderschönes Kunstwerk den Livegang beglücken. Doch dies ist meist ein Wunschtraum und schon nach kürzester Zeit werden die ersten Probleme sichtbar, denn die wahren Entscheidungen werden erst im Detail getroffen. Und nun beginnt der zu oft geführte Kampf um die Zeit, den Feature Scope und die Code-Qualität.</p>\n\n<p>Wie in &#8220;Practices for Scaling Lean &amp; Agile Development: Successful Large, Multisite &amp; Offshore Product Development with Large-Scale Scrum&#8221; beschrieben liegt die größte Gefahr in einen Ping-Pong Zyklus zwischen Re-Designs und Feature-Requests zu geraten. Bei diesem wechseln sich Sprints mit überwiegend Business-Requirements mit Sprints mit überwiegend technischen Requirements ab.</p>\n\n<h2>Warum entwickelt sich ein solcher Ping-Pong Zyklus?</h2>\n\n<p>Der Ausgangspunkt ist meist das Verlangen Anforderungen so schnell wie möglich zu liefern. Zu Beginn des Projekts ist dies meist kein Problem, da jeder im Team alle Stellen im Code und alle Requirements kennt. Workarounds werden (noch) nicht benötigt. Unit-Tests und kontinuierliches Refactoring wird zu Beginn oft abgelehnt, da man ohne diese <em>lästigen Aufgaben</em> schneller Features liefern kann. Nachdem das Programm eine kritische Größe erreicht hat macht sich diese Nachlässigkeit umso stärker bemerkbar. Um die Liefergeschwindigkeit nicht zu beeinträchtigen beginnt man Code zu kopieren, um bestehende Funktionalität nicht versehentlich zu zerstören. Denn ohne automatisierte Tests kann bei dieser Größe des Projekts keiner mehr alle Funktionen manuell überprüfen. Die Code-Base beginnt immer mehr zu verotten. Der einzige Ausweg sind dann oft aufwändige Software-Redesigns und Regressionstests.</p>\n\n<h2>Deshalb meine These:</h2>\n\n<p><strong>Je länger die Zyklen dauern, desto schneller entwickelt sich das System zu einem Legacy-System.</strong></p>\n\n<p>Wie aus den agilen Methoden bekannt, sind kleine Batches anzustreben. Dies gilt selbstverständlich auch für diese Ping-Pong zyklen. Die extremste Form ist die testgetriebene Softwareentwicklung. Hierbei ist Refactoring ein fester Bestandteil eines jeden Programmierers bei der jeder noch so kleinen Programmänderung. Das Programmdesign wird kontinuierlich von jedem Programmierer verbessert.</p>\n\n<p>TDD hat aber auch einen sehr großen Vorteil für das Controlling.\nBei langen Ping-Pong Zyklen hat man den Nachteil, dass die Folgekosten, die durch ein Feature entstehen nicht während der Entwicklung sichtbar sind. Erst bei den nächsten Feature-Requests werden nötige Umbaumaßnahmen oft unausweichlich. Werden diese Features aus unterschiedlichen Kostentöpfen bezahlt stellt sich auf Business-Seite nun die berechtigte Frage, wieso vermeintlich kleine Features unter umständen teurer sein sollen als vorangegangene große Features? Ebenso ist es schwer Folgekosten auf bereits abgeschlossene Projekte zu verbuchen. Es steht also die Frage im Raum: Wer zahlt diese technischen Umbaumaßnahmen?\nTest-Driven-Development verringert das Bedürfnis nach Redesigns, bzw. vermeidet diese im großen Stil fast vollständig. Umbaumaßnahmen werden bei jeder kleinen Änderung durchgeführt, sodass die Architektur immer die aktuellen Requirements widerspiegeln. Sollte sich das Business nicht allzu radikal zwischen zwei aufeinanderfolgenden Requirements ändern, bedarf es also keine extra Code-Redesigns. Selbstverständlich gibt es auch hier Ausnahmen, jedoch werden diese noch während der laufenden Entwicklung sichtbar und können deshalb auch auf das Projekt gebucht werden, das diese Business-Anforderungen eingebracht hat. Natürlich können sich die Prioritäten auf Grund der neuen Kostenlage auch entsprechend schneller ändern. Damit ist TDD auch ein Vorteil für Requirements-Manager (PM) oder Product Ownern (PO).</p>\n\n<p>Würde man anstelle von TDD in langen Zyklen zwischen Redesigns und Business-Requirements arbeiten wird man schnell einen Punkt erreichen an dem technische Verbesserungen für PMs/POs nicht mehr Nachvollziehbar sind. Je länger die Zyklen sind, desto unklarer ist der Bezug zwischen technischen Verbesserungen zu fachlichen Anforderungen. Diese Unklarheit führt unweigerlich zu misstrauen, Unmut und erhöhten Druck auf die Programmierer. Nicht die vermeintlich goldenen Türklinken sollen verbaut werden, sondern die Anforderungen sollen schnell umgesetzt werden. Es beginnt nun eine Spirale die weitere Verbesserungen am Code verbieten, um schneller Anforderungen umzusetzen bis der Code irgendwann derart unwartbar geworden ist und wir von einem echten &#8220;gewachsenen&#8221; legacy System sprechen.</p>\n\n<p>(see also: <a href="/articles/2012/04/10/refactoring/">Blogeintrag zum Thema Refactoring</a>)</p>\n',html:'<p><em>oder die Kunst ein neues System nicht zu einem Legacy-Projekt verkommen zu lassen.</em></p>\n<p>Die allermeisten Programmierer mögen Projekte lieber, die nicht auf einer bestehenden Code-Basis aufbauen. Sie lieben es selbst auf der grünen Wiese anzufangen und sind sich sicher, dass sie diesmal alles richtig machen werden. Diesmal wird am Ende ein wunderschönes Kunstwerk den Livegang beglücken. Doch dies ist meist ein Wunschtraum und schon nach kürzester Zeit werden die ersten Probleme sichtbar, denn die wahren Entscheidungen werden erst im Detail getroffen. Und nun beginnt der zu oft geführte Kampf um die Zeit, den Feature Scope und die Code-Qualität.</p>\n<p>Wie in &#8220;Practices for Scaling Lean &amp; Agile Development: Successful Large, Multisite &amp; Offshore Product Development with Large-Scale Scrum&#8221; beschrieben liegt die größte Gefahr in einen Ping-Pong Zyklus zwischen Re-Designs und Feature-Requests zu geraten. Bei diesem wechseln sich Sprints mit überwiegend Business-Requirements mit Sprints mit überwiegend technischen Requirements ab.</p>\n<h2>Warum entwickelt sich ein solcher Ping-Pong Zyklus?</h2>\n<p>Der Ausgangspunkt ist meist das Verlangen Anforderungen so schnell wie möglich zu liefern. Zu Beginn des Projekts ist dies meist kein Problem, da jeder im Team alle Stellen im Code und alle Requirements kennt. Workarounds werden (noch) nicht benötigt. Unit-Tests und kontinuierliches Refactoring wird zu Beginn oft abgelehnt, da man ohne diese <em>lästigen Aufgaben</em> schneller Features liefern kann. Nachdem das Programm eine kritische Größe erreicht hat macht sich diese Nachlässigkeit umso stärker bemerkbar. Um die Liefergeschwindigkeit nicht zu beeinträchtigen beginnt man Code zu kopieren, um bestehende Funktionalität nicht versehentlich zu zerstören. Denn ohne automatisierte Tests kann bei dieser Größe des Projekts keiner mehr alle Funktionen manuell überprüfen. Die Code-Base beginnt immer mehr zu verotten. Der einzige Ausweg sind dann oft aufwändige Software-Redesigns und Regressionstests.</p>\n<h2>Deshalb meine These:</h2>\n<p><strong>Je länger die Zyklen dauern, desto schneller entwickelt sich das System zu einem Legacy-System.</strong></p>\n<p>Wie aus den agilen Methoden bekannt, sind kleine Batches anzustreben. Dies gilt selbstverständlich auch für diese Ping-Pong zyklen. Die extremste Form ist die testgetriebene Softwareentwicklung. Hierbei ist Refactoring ein fester Bestandteil eines jeden Programmierers bei der jeder noch so kleinen Programmänderung. Das Programmdesign wird kontinuierlich von jedem Programmierer verbessert.</p>\n<p>TDD hat aber auch einen sehr großen Vorteil für das Controlling.\nBei langen Ping-Pong Zyklen hat man den Nachteil, dass die Folgekosten, die durch ein Feature entstehen nicht während der Entwicklung sichtbar sind. Erst bei den nächsten Feature-Requests werden nötige Umbaumaßnahmen oft unausweichlich. Werden diese Features aus unterschiedlichen Kostentöpfen bezahlt stellt sich auf Business-Seite nun die berechtigte Frage, wieso vermeintlich kleine Features unter umständen teurer sein sollen als vorangegangene große Features? Ebenso ist es schwer Folgekosten auf bereits abgeschlossene Projekte zu verbuchen. Es steht also die Frage im Raum: Wer zahlt diese technischen Umbaumaßnahmen?\nTest-Driven-Development verringert das Bedürfnis nach Redesigns, bzw. vermeidet diese im großen Stil fast vollständig. Umbaumaßnahmen werden bei jeder kleinen Änderung durchgeführt, sodass die Architektur immer die aktuellen Requirements widerspiegeln. Sollte sich das Business nicht allzu radikal zwischen zwei aufeinanderfolgenden Requirements ändern, bedarf es also keine extra Code-Redesigns. Selbstverständlich gibt es auch hier Ausnahmen, jedoch werden diese noch während der laufenden Entwicklung sichtbar und können deshalb auch auf das Projekt gebucht werden, das diese Business-Anforderungen eingebracht hat. Natürlich können sich die Prioritäten auf Grund der neuen Kostenlage auch entsprechend schneller ändern. Damit ist TDD auch ein Vorteil für Requirements-Manager (PM) oder Product Ownern (PO).</p>\n<p>Würde man anstelle von TDD in langen Zyklen zwischen Redesigns und Business-Requirements arbeiten wird man schnell einen Punkt erreichen an dem technische Verbesserungen für PMs/POs nicht mehr Nachvollziehbar sind. Je länger die Zyklen sind, desto unklarer ist der Bezug zwischen technischen Verbesserungen zu fachlichen Anforderungen. Diese Unklarheit führt unweigerlich zu misstrauen, Unmut und erhöhten Druck auf die Programmierer. Nicht die vermeintlich goldenen Türklinken sollen verbaut werden, sondern die Anforderungen sollen schnell umgesetzt werden. Es beginnt nun eine Spirale die weitere Verbesserungen am Code verbieten, um schneller Anforderungen umzusetzen bis der Code irgendwann derart unwartbar geworden ist und wir von einem echten &#8220;gewachsenen&#8221; legacy System sprechen.</p>\n<p>(see also: <a href="/articles/2012/04/10/refactoring/">Blogeintrag zum Thema Refactoring</a>)</p>\n',attributes:{layout:"post",title:"Ping-Pong Development Cycle",date:"2013-04-14T15:19:00+02:00",tags:["TDD","Softwareentwicklung","agile","cycle"],tumblr_url:"http://simondittlmann.tumblr.com/post/47949610384/ping-pong-development-cycle",comments:!0,categories:"",_meta:{resourcePath:"/home/travis/build/Pindar/itnotes/contents/posts/2013-04-14-ping-pong-development-cycle.md"}},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"dynamicMarkdown"},[_c(\'p\',[_c(\'em\',[_vm._v("oder die Kunst ein neues System nicht zu einem Legacy-Projekt verkommen zu lassen.")])]),_vm._v(" "),_c(\'p\',[_vm._v("Die allermeisten Programmierer mögen Projekte lieber, die nicht auf einer bestehenden Code-Basis aufbauen. Sie lieben es selbst auf der grünen Wiese anzufangen und sind sich sicher, dass sie diesmal alles richtig machen werden. Diesmal wird am Ende ein wunderschönes Kunstwerk den Livegang beglücken. Doch dies ist meist ein Wunschtraum und schon nach kürzester Zeit werden die ersten Probleme sichtbar, denn die wahren Entscheidungen werden erst im Detail getroffen. Und nun beginnt der zu oft geführte Kampf um die Zeit, den Feature Scope und die Code-Qualität.")]),_vm._v(" "),_c(\'p\',[_vm._v("Wie in “Practices for Scaling Lean & Agile Development: Successful Large, Multisite & Offshore Product Development with Large-Scale Scrum” beschrieben liegt die größte Gefahr in einen Ping-Pong Zyklus zwischen Re-Designs und Feature-Requests zu geraten. Bei diesem wechseln sich Sprints mit überwiegend Business-Requirements mit Sprints mit überwiegend technischen Requirements ab.")]),_vm._v(" "),_c(\'h2\',[_vm._v("Warum entwickelt sich ein solcher Ping-Pong Zyklus?")]),_vm._v(" "),_c(\'p\',[_vm._v("Der Ausgangspunkt ist meist das Verlangen Anforderungen so schnell wie möglich zu liefern. Zu Beginn des Projekts ist dies meist kein Problem, da jeder im Team alle Stellen im Code und alle Requirements kennt. Workarounds werden (noch) nicht benötigt. Unit-Tests und kontinuierliches Refactoring wird zu Beginn oft abgelehnt, da man ohne diese "),_c(\'em\',[_vm._v("lästigen Aufgaben")]),_vm._v(" schneller Features liefern kann. Nachdem das Programm eine kritische Größe erreicht hat macht sich diese Nachlässigkeit umso stärker bemerkbar. Um die Liefergeschwindigkeit nicht zu beeinträchtigen beginnt man Code zu kopieren, um bestehende Funktionalität nicht versehentlich zu zerstören. Denn ohne automatisierte Tests kann bei dieser Größe des Projekts keiner mehr alle Funktionen manuell überprüfen. Die Code-Base beginnt immer mehr zu verotten. Der einzige Ausweg sind dann oft aufwändige Software-Redesigns und Regressionstests.")]),_vm._v(" "),_c(\'h2\',[_vm._v("Deshalb meine These:")]),_vm._v(" "),_c(\'p\',[_c(\'strong\',[_vm._v("Je länger die Zyklen dauern, desto schneller entwickelt sich das System zu einem Legacy-System.")])]),_vm._v(" "),_c(\'p\',[_vm._v("Wie aus den agilen Methoden bekannt, sind kleine Batches anzustreben. Dies gilt selbstverständlich auch für diese Ping-Pong zyklen. Die extremste Form ist die testgetriebene Softwareentwicklung. Hierbei ist Refactoring ein fester Bestandteil eines jeden Programmierers bei der jeder noch so kleinen Programmänderung. Das Programmdesign wird kontinuierlich von jedem Programmierer verbessert.")]),_vm._v(" "),_c(\'p\',[_vm._v("TDD hat aber auch einen sehr großen Vorteil für das Controlling.\\nBei langen Ping-Pong Zyklen hat man den Nachteil, dass die Folgekosten, die durch ein Feature entstehen nicht während der Entwicklung sichtbar sind. Erst bei den nächsten Feature-Requests werden nötige Umbaumaßnahmen oft unausweichlich. Werden diese Features aus unterschiedlichen Kostentöpfen bezahlt stellt sich auf Business-Seite nun die berechtigte Frage, wieso vermeintlich kleine Features unter umständen teurer sein sollen als vorangegangene große Features? Ebenso ist es schwer Folgekosten auf bereits abgeschlossene Projekte zu verbuchen. Es steht also die Frage im Raum: Wer zahlt diese technischen Umbaumaßnahmen?\\nTest-Driven-Development verringert das Bedürfnis nach Redesigns, bzw. vermeidet diese im großen Stil fast vollständig. Umbaumaßnahmen werden bei jeder kleinen Änderung durchgeführt, sodass die Architektur immer die aktuellen Requirements widerspiegeln. Sollte sich das Business nicht allzu radikal zwischen zwei aufeinanderfolgenden Requirements ändern, bedarf es also keine extra Code-Redesigns. Selbstverständlich gibt es auch hier Ausnahmen, jedoch werden diese noch während der laufenden Entwicklung sichtbar und können deshalb auch auf das Projekt gebucht werden, das diese Business-Anforderungen eingebracht hat. Natürlich können sich die Prioritäten auf Grund der neuen Kostenlage auch entsprechend schneller ändern. Damit ist TDD auch ein Vorteil für Requirements-Manager (PM) oder Product Ownern (PO).")]),_vm._v(" "),_c(\'p\',[_vm._v("Würde man anstelle von TDD in langen Zyklen zwischen Redesigns und Business-Requirements arbeiten wird man schnell einen Punkt erreichen an dem technische Verbesserungen für PMs/POs nicht mehr Nachvollziehbar sind. Je länger die Zyklen sind, desto unklarer ist der Bezug zwischen technischen Verbesserungen zu fachlichen Anforderungen. Diese Unklarheit führt unweigerlich zu misstrauen, Unmut und erhöhten Druck auf die Programmierer. Nicht die vermeintlich goldenen Türklinken sollen verbaut werden, sondern die Anforderungen sollen schnell umgesetzt werden. Es beginnt nun eine Spirale die weitere Verbesserungen am Code verbieten, um schneller Anforderungen umzusetzen bis der Code irgendwann derart unwartbar geworden ist und wir von einem echten “gewachsenen” legacy System sprechen.")]),_vm._v(" "),_c(\'p\',[_vm._v("(see also: "),_c(\'a\',{attrs:{"href":"/articles/2012/04/10/refactoring/"}},[_vm._v("Blogeintrag zum Thema Refactoring")]),_vm._v(")")])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this.$createElement;this._self._c;return this._m(0)},this.$options.staticRenderFns=[function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("div",{staticClass:"dynamicMarkdown"},[r("p",[r("em",[e._v("oder die Kunst ein neues System nicht zu einem Legacy-Projekt verkommen zu lassen.")])]),e._v(" "),r("p",[e._v("Die allermeisten Programmierer mögen Projekte lieber, die nicht auf einer bestehenden Code-Basis aufbauen. Sie lieben es selbst auf der grünen Wiese anzufangen und sind sich sicher, dass sie diesmal alles richtig machen werden. Diesmal wird am Ende ein wunderschönes Kunstwerk den Livegang beglücken. Doch dies ist meist ein Wunschtraum und schon nach kürzester Zeit werden die ersten Probleme sichtbar, denn die wahren Entscheidungen werden erst im Detail getroffen. Und nun beginnt der zu oft geführte Kampf um die Zeit, den Feature Scope und die Code-Qualität.")]),e._v(" "),r("p",[e._v("Wie in “Practices for Scaling Lean & Agile Development: Successful Large, Multisite & Offshore Product Development with Large-Scale Scrum” beschrieben liegt die größte Gefahr in einen Ping-Pong Zyklus zwischen Re-Designs und Feature-Requests zu geraten. Bei diesem wechseln sich Sprints mit überwiegend Business-Requirements mit Sprints mit überwiegend technischen Requirements ab.")]),e._v(" "),r("h2",[e._v("Warum entwickelt sich ein solcher Ping-Pong Zyklus?")]),e._v(" "),r("p",[e._v("Der Ausgangspunkt ist meist das Verlangen Anforderungen so schnell wie möglich zu liefern. Zu Beginn des Projekts ist dies meist kein Problem, da jeder im Team alle Stellen im Code und alle Requirements kennt. Workarounds werden (noch) nicht benötigt. Unit-Tests und kontinuierliches Refactoring wird zu Beginn oft abgelehnt, da man ohne diese "),r("em",[e._v("lästigen Aufgaben")]),e._v(" schneller Features liefern kann. Nachdem das Programm eine kritische Größe erreicht hat macht sich diese Nachlässigkeit umso stärker bemerkbar. Um die Liefergeschwindigkeit nicht zu beeinträchtigen beginnt man Code zu kopieren, um bestehende Funktionalität nicht versehentlich zu zerstören. Denn ohne automatisierte Tests kann bei dieser Größe des Projekts keiner mehr alle Funktionen manuell überprüfen. Die Code-Base beginnt immer mehr zu verotten. Der einzige Ausweg sind dann oft aufwändige Software-Redesigns und Regressionstests.")]),e._v(" "),r("h2",[e._v("Deshalb meine These:")]),e._v(" "),r("p",[r("strong",[e._v("Je länger die Zyklen dauern, desto schneller entwickelt sich das System zu einem Legacy-System.")])]),e._v(" "),r("p",[e._v("Wie aus den agilen Methoden bekannt, sind kleine Batches anzustreben. Dies gilt selbstverständlich auch für diese Ping-Pong zyklen. Die extremste Form ist die testgetriebene Softwareentwicklung. Hierbei ist Refactoring ein fester Bestandteil eines jeden Programmierers bei der jeder noch so kleinen Programmänderung. Das Programmdesign wird kontinuierlich von jedem Programmierer verbessert.")]),e._v(" "),r("p",[e._v("TDD hat aber auch einen sehr großen Vorteil für das Controlling.\nBei langen Ping-Pong Zyklen hat man den Nachteil, dass die Folgekosten, die durch ein Feature entstehen nicht während der Entwicklung sichtbar sind. Erst bei den nächsten Feature-Requests werden nötige Umbaumaßnahmen oft unausweichlich. Werden diese Features aus unterschiedlichen Kostentöpfen bezahlt stellt sich auf Business-Seite nun die berechtigte Frage, wieso vermeintlich kleine Features unter umständen teurer sein sollen als vorangegangene große Features? Ebenso ist es schwer Folgekosten auf bereits abgeschlossene Projekte zu verbuchen. Es steht also die Frage im Raum: Wer zahlt diese technischen Umbaumaßnahmen?\nTest-Driven-Development verringert das Bedürfnis nach Redesigns, bzw. vermeidet diese im großen Stil fast vollständig. Umbaumaßnahmen werden bei jeder kleinen Änderung durchgeführt, sodass die Architektur immer die aktuellen Requirements widerspiegeln. Sollte sich das Business nicht allzu radikal zwischen zwei aufeinanderfolgenden Requirements ändern, bedarf es also keine extra Code-Redesigns. Selbstverständlich gibt es auch hier Ausnahmen, jedoch werden diese noch während der laufenden Entwicklung sichtbar und können deshalb auch auf das Projekt gebucht werden, das diese Business-Anforderungen eingebracht hat. Natürlich können sich die Prioritäten auf Grund der neuen Kostenlage auch entsprechend schneller ändern. Damit ist TDD auch ein Vorteil für Requirements-Manager (PM) oder Product Ownern (PO).")]),e._v(" "),r("p",[e._v("Würde man anstelle von TDD in langen Zyklen zwischen Redesigns und Business-Requirements arbeiten wird man schnell einen Punkt erreichen an dem technische Verbesserungen für PMs/POs nicht mehr Nachvollziehbar sind. Je länger die Zyklen sind, desto unklarer ist der Bezug zwischen technischen Verbesserungen zu fachlichen Anforderungen. Diese Unklarheit führt unweigerlich zu misstrauen, Unmut und erhöhten Druck auf die Programmierer. Nicht die vermeintlich goldenen Türklinken sollen verbaut werden, sondern die Anforderungen sollen schnell umgesetzt werden. Es beginnt nun eine Spirale die weitere Verbesserungen am Code verbieten, um schneller Anforderungen umzusetzen bis der Code irgendwann derart unwartbar geworden ist und wir von einem echten “gewachsenen” legacy System sprechen.")]),e._v(" "),r("p",[e._v("(see also: "),r("a",{attrs:{href:"/articles/2012/04/10/refactoring/"}},[e._v("Blogeintrag zum Thema Refactoring")]),e._v(")")])])}]}}}}}}]);